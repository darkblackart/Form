"use strict";
var report_1 = require('stryker-api/report');
var log4js = require('log4js');
var path = require('path');
var util = require('./util');
var fs = require('fs');
var HandlebarsModel_1 = require('./HandlebarsModel');
var SourceFileTreeLeaf_1 = require('./SourceFileTreeLeaf');
var log = log4js.getLogger('HtmlReporter');
/**
 * Represents a node (directory) which can contain source files which in turn include mutant results
 */
var SourceFileTreeNode = (function () {
    /**
     * @param name - The name of the directory which this node represents
     */
    function SourceFileTreeNode(name) {
        this.name = name;
        this.leafs = [];
        this.children = [];
    }
    /**
     * Adds a source file to this node or one of its children
     * @param file - The file to add
     * @param pathComponents - The path components of the file. Leave empty, should only be used for recursive calls.
     */
    SourceFileTreeNode.prototype.addSourceFile = function (file, pathComponents) {
        if (!pathComponents) {
            pathComponents = file.path.split(path.sep);
        }
        var nextPathComponent = pathComponents.shift() || '';
        if (!pathComponents.length) {
            this.leafs.push(new SourceFileTreeLeaf_1.default(file));
        }
        else {
            var nodeToAddTo = this.children.filter(function (node) { return node.name === nextPathComponent; }).pop();
            if (!nodeToAddTo) {
                nodeToAddTo = new SourceFileTreeNode(nextPathComponent);
                this.children.push(nodeToAddTo);
            }
            nodeToAddTo.addSourceFile(file, pathComponents);
        }
    };
    /**
     * Adds a mutant result to the correct leaf in this node or one of the children
     * Warning: All source files need to be added before mutant results should be added
     * @param result - the mutant result to add
     * @param pathComponents - The path components of the result. Leave empty, should only be used for recursive calls.
     */
    SourceFileTreeNode.prototype.addMutantResult = function (result, pathComponents) {
        if (!pathComponents) {
            pathComponents = result.sourceFilePath.split(path.sep);
        }
        var nextPathComponent = pathComponents.shift();
        var childNode = this.children.filter(function (n) { return n.name === nextPathComponent; }).pop();
        if (childNode) {
            childNode.addMutantResult(result, pathComponents);
        }
        else {
            var leaf = this.leafs.filter(function (leaf) { return leaf.file.path === result.sourceFilePath; }).pop();
            if (leaf) {
                leaf.results.push(result);
            }
            else {
                log.warn("Reported a mutant result for \"" + result.sourceFilePath + "\" but could not find source code for a file with that name. Skipping the result. Result was " + JSON.stringify(result) + ".");
            }
        }
    };
    SourceFileTreeNode.prototype.normalizeNames = function () {
        // Merge together empty container nodes
        while (this.leafs.length === 0 && this.children.length === 1) {
            this.name = path.join(this.name, this.children[0].name);
            this.leafs = this.children[0].leafs;
            this.children = this.children[0].children;
        }
        // Remove illegal path characters
        this.name = this.name.replace(/:/g, '');
        // Recursively do the same
        this.children.forEach(function (child) { return child.normalizeNames(); });
    };
    SourceFileTreeNode.prototype.calculateModel = function (urlPrefix) {
        var totalKilled = 0, totalSurvived = 0, totalTimedOut = 0, totalNoCoverage = 0, totalErrors = 0;
        this.children.forEach(function (child) {
            child.calculateModel("../" + urlPrefix);
            totalKilled += child.model.totalKilled;
            totalTimedOut += child.model.totalTimedOut;
            totalSurvived += child.model.totalSurvived;
            totalNoCoverage += child.model.totalNoCoverage;
            totalErrors += child.model.totalErrors;
        });
        this.leafs.forEach(function (leaf) {
            leaf.calculateModel(urlPrefix);
            totalKilled += leaf.model.totalKilled;
            totalSurvived += leaf.model.totalSurvived;
            totalTimedOut += leaf.model.totalTimedOut;
            totalNoCoverage += leaf.model.totalNoCoverage;
            totalErrors += leaf.model.totalErrors;
        });
        this.model = new HandlebarsModel_1.default(this.name, urlPrefix, this.name + "/index.html", totalKilled, totalTimedOut, totalSurvived, totalNoCoverage, totalErrors);
    };
    SourceFileTreeNode.prototype.writeReportNodeRecursive = function (directory) {
        util.mkdirRecursiveSync(directory);
        fs.writeFileSync(path.join(directory, 'index.html'), util.nodeTemplate(this));
        this.children.forEach(function (child) { return child.writeReportNodeRecursive(path.join(directory, child.name)); });
        this.leafs.forEach(function (leaf) { return leaf.writeFileReport(directory); });
    };
    SourceFileTreeNode.prototype.toString = function (offset) {
        if (offset === void 0) { offset = 0; }
        var prefix = '';
        for (var i = 0; i < offset; i++) {
            prefix += '.';
        }
        var str = "" + prefix + this.name + "\n";
        this.leafs.forEach(function (l) {
            str += prefix + "./" + l.name;
            if (l.results.length) {
                str += ' [';
                l.results.forEach(function (m) { return str += SourceFileTreeNode.mutantStatusToString(m.status); });
                str += ']';
            }
            str += '\n';
        });
        this.children.forEach(function (n) { return str += n.toString(offset + 1); });
        return str;
    };
    SourceFileTreeNode.mutantStatusToString = function (status) {
        switch (status) {
            case report_1.MutantStatus.Killed:
                return '.';
            case report_1.MutantStatus.Survived:
                return 'S';
            case report_1.MutantStatus.TimedOut:
                return 'T';
            case report_1.MutantStatus.NoCoverage:
                return 'O';
            case report_1.MutantStatus.Error:
                return 'E';
        }
    };
    return SourceFileTreeNode;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SourceFileTreeNode;
//# sourceMappingURL=SourceFileTreeNode.js.map