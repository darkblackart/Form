import 'estree';
declare module 'estree' {
    interface Identifier {
        nodeID: number;
    }
    interface SimpleLiteral {
        nodeID: number;
    }
    interface RegExpLiteral {
        nodeID: number;
    }
    interface Program {
        nodeID: number;
    }
    interface FunctionDeclaration {
        nodeID: number;
    }
    interface FunctionExpression {
        nodeID: number;
    }
    interface ArrowFunctionExpression {
        nodeID: number;
    }
    interface SwitchCase {
        nodeID: number;
    }
    interface CatchClause {
        nodeID: number;
    }
    interface VariableDeclarator {
        nodeID: number;
    }
    interface ExpressionStatement {
        nodeID: number;
    }
    interface BlockStatement {
        nodeID: number;
    }
    interface EmptyStatement {
        nodeID: number;
    }
    interface DebuggerStatement {
        nodeID: number;
    }
    interface WithStatement {
        nodeID: number;
    }
    interface ReturnStatement {
        nodeID: number;
    }
    interface LabeledStatement {
        nodeID: number;
    }
    interface BreakStatement {
        nodeID: number;
    }
    interface ContinueStatement {
        nodeID: number;
    }
    interface IfStatement {
        nodeID: number;
    }
    interface SwitchStatement {
        nodeID: number;
    }
    interface ThrowStatement {
        nodeID: number;
    }
    interface TryStatement {
        nodeID: number;
    }
    interface WhileStatement {
        nodeID: number;
    }
    interface DoWhileStatement {
        nodeID: number;
    }
    interface ForStatement {
        nodeID: number;
    }
    interface ForInStatement {
        nodeID: number;
    }
    interface ForOfStatement {
        nodeID: number;
    }
    interface VariableDeclaration {
        nodeID: number;
    }
    interface ClassDeclaration {
        nodeID: number;
    }
    interface ThisExpression {
        nodeID: number;
    }
    interface ArrayExpression {
        nodeID: number;
    }
    interface ObjectExpression {
        nodeID: number;
    }
    interface YieldExpression {
        nodeID: number;
    }
    interface UnaryExpression {
        nodeID: number;
    }
    interface UpdateExpression {
        nodeID: number;
    }
    interface BinaryExpression {
        nodeID: number;
    }
    interface AssignmentExpression {
        nodeID: number;
    }
    interface LogicalExpression {
        nodeID: number;
    }
    interface MemberExpression {
        nodeID: number;
    }
    interface ConditionalExpression {
        nodeID: number;
    }
    interface SimpleCallExpression {
        nodeID: number;
    }
    interface NewExpression {
        nodeID: number;
    }
    interface SequenceExpression {
        nodeID: number;
    }
    interface TemplateLiteral {
        nodeID: number;
    }
    interface TaggedTemplateExpression {
        nodeID: number;
    }
    interface ClassExpression {
        nodeID: number;
    }
    interface MetaProperty {
        nodeID: number;
    }
    interface Property {
        nodeID: number;
    }
    interface AssignmentProperty {
        nodeID: number;
    }
    interface Super {
        nodeID: number;
    }
    interface TemplateElement {
        nodeID: number;
    }
    interface SpreadElement {
        nodeID: number;
    }
    interface ObjectPattern {
        nodeID: number;
    }
    interface ArrayPattern {
        nodeID: number;
    }
    interface RestElement {
        nodeID: number;
    }
    interface AssignmentPattern {
        nodeID: number;
    }
    interface ClassBody {
        nodeID: number;
    }
    interface MethodDefinition {
        nodeID: number;
    }
    interface ImportDeclaration {
        nodeID: number;
    }
    interface ExportNamedDeclaration {
        nodeID: number;
    }
    interface ExportDefaultDeclaration {
        nodeID: number;
    }
    interface ExportAllDeclaration {
        nodeID: number;
    }
    interface ImportSpecifier {
        nodeID: number;
    }
    interface ImportDefaultSpecifier {
        nodeID: number;
    }
    interface ImportNamespaceSpecifier {
        nodeID: number;
    }
    interface ExportSpecifier {
        nodeID: number;
    }
}
